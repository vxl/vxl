#Travis CI configuration for VXL
# See http://travis-ci.org/vxl/vxl

#dist: trusty # This is the default as of August 2017
sudo: false

language: cpp
compiler:
  - clang
  - gcc

# environment variables
env:
  global:
    - PROJ_SOURCE_DIR=${TRAVIS_BUILD_DIR}
    - PROJ_BUILD_DIR=${HOME}/build
    - PROJ_INSTALL_DIR=${HOME}/install

# https://docs.travis-ci.com/user/customizing-the-build/
git:
  depth: 3

# cache the build dir
cache:
  timeout: 1000
  directories:
  - ${PROJ_BUILD_DIR}

# general dependencies
addons:
  apt:
    packages:
      - ninja-build
  homebrew:
    packages:
      - ninja

# additional setup
install:

  # additional dependencies in ${HOME}/deps/
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  # install recent cmake
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version && ctest --version

# before script runs, we need to resolve timestamps between the git clone
# and the older build cache. A good discussion is found here:
# https://blog.esciencecenter.nl/travis-caching-and-incremental-builds-6518b89ee889
before_script:

  # create build & install directories if they do not exist
  - mkdir -p ${PROJ_BUILD_DIR} ${PROJ_INSTALL_DIR}

  # fix times on source
  - |
    MD5_FILE=${PROJ_BUILD_DIR}/build_cache.md5
    export OLDEST_DATE=$(find ${PROJ_BUILD_DIR} -type f -printf '%TD %TT\n' | sort | head -1)
    if [ -f ${MD5_FILE} ]; then
      (md5sum -c ${MD5_FILE} 2>/dev/null || :) | awk '{if ($NF == "OK") print substr($0, 1, length($0)-4)}' | xargs touch -d "${OLDEST_DATE}"
    fi
    find ${PROJ_SOURCE_DIR} \( -type d -name .git \) -prune -o -type f -print0 | xargs -0 md5sum > ${MD5_FILE}

# main script
script:
  - cd ${PROJ_BUILD_DIR}
  - cmake
          -G Ninja
          -DCMAKE_INSTALL_PREFIX:PATH=${PROJ_INSTALL_DIR}
          -DCMAKE_CXX_STANDARD:STRING=11
          -DVXL_BUILD_BRL:BOOL=OFF
          -DCMAKE_BUILD_TYPE:STRING=Release
          -DVXL_FORCE_B3P_EXPAT:BOOL=ON
          -DVXL_FORCE_B3P_SHAPELIB:BOOL=ON
          -DVXL_FORCE_V3P_BZLIB2:BOOL=ON
          -DVXL_FORCE_V3P_CLIPPER:BOOL=ON
          -DVXL_FORCE_V3P_DCMTK:BOOL=ON
          -DVXL_FORCE_V3P_GEOTIFF:BOOL=ON
          -DVXL_FORCE_V3P_J2K:BOOL=ON
          -DVXL_FORCE_V3P_JPEG:BOOL=ON
          -DVXL_FORCE_V3P_OPENJPEG2:BOOL=ON
          -DVXL_FORCE_V3P_PNG:BOOL=ON
          -DVXL_FORCE_V3P_TIFF:BOOL=ON
          -DVXL_FORCE_V3P_ZLIB:BOOL=ON
          ${PROJ_SOURCE_DIR}
  - ctest -D ExperimentalStart
  - ctest -D ExperimentalConfigure
  - ctest -D ExperimentalBuild -j2
  - ctest -D ExperimentalTest --schedule-random -j2 --output-on-failure
  - ctest -D ExperimentalSubmit
  - ninja install
