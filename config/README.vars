

			 IUE Makefiles
                         -------------

This documentation for IUE makefiles is automatically generated from
the central makefiles.  It describes the variables used to control the
build process, divided into four categories:

Target
  A make target, such as all, cpp-File.C etc.

Option:
  Something that an ordinary user might want to specify
  on the command line for any invocation of make.


Variable:
  Something that is specified in a user-level makefile

Select:
  Flags which are set in order to access non-default functionality,
  such as OpenGL, SQL etc.


Config:
  A variable that is set at configuration time based
  on the operating system, locally installed software
  versions etc.

Internal:
  Variables used only in the driver makefiles themselves.

The following files in
    /cygdrive/p/personal/TargetJr/vxl/config
Were used to make this document
    rules.mk tpp-rules.mk params.mk tpp-params.mk

================================= Target =================================
all
     The default target, makes any LIBRARY/PROGRAM/etc in the makefile

help
     make help prints some useful info.

subdirs
     Driver to send make into subdirectories.

manpages
     Make manual pages in $(MANDIR)

htmlpages
     Make HTML manual pages in $(HTMLDIR)

depend
     Brutal depend target -- removes all .d files and remakes

clean
     The old reliable.  Removes .d, .o, .obj files, but not executables.
     Operates only in the object directory corresponding to the current value of BUILD.

clean_obj_only
     Remove only object files.

clean_dep_only
     Remove only .d files.

clean_prog
     Remove executables, but not objects or dependencies

dclean
     Remove object and lib directories

cpp-%
     make cpp-File.C will print the output of running the C preprocessor on File.C,
     using all appropriate IUE command-line switches.

echovar-%
     Handy target to print a "make" variable's value e.g.
     make echovar-SOURCES
     ECHOVAR MUST BE USABLE IN SCRIPTS.  FOR PRETTY PRINTING USE SHOWVAR.

showvar-%
     Pretty-printing version of echovar.  We need a seperate showvar because
     echovar must be usable in scripts.

originvar-%
     Show origin of a make variable

================================= Option =================================
NODEPENDS
     Set to 1 to inhibit dependency checking.  If you have never been bitten by
     a non up-to-date dependency before, do not use this flag.

CLEAN
     Set in site.mk, or on make line, to indicate that object files should be
     removed after successfully building the library or executables.

QUIET
     Set QUIET= to see various bits of make in operation, e.g.
     depend commands

COMPILER
     Set the name of the compiler to use.  This will be the name passed
     to the toplevel "configure" with any spaces stripped, and will be
     added to $(OBJDIR) so that objects produced by different compilers
     go in different directories.  Takes its value from IU_COMPILER if that
     is set in the environment.

BUILD
     Define what type of code to produce.  This causes the inclusion of
     config/build-$(BUILD).mk which sets flags such as optimization,
     debugging, profiling and whether to produce shared or static libraries.
     Common values are "shared", "noshared", "profiled", "shared-opt".

LINK_INTO_TMP
     The IRIX linker is incredibly slow over NFS, so setting this option causes
     linking to be directed into /tmp, speeding things up by a factor between 1.5
     and 3.  For solaris on a fast local disk, this slows the link down by about
     20%.  However it is on by default because it also means that remaking a shared
     library while the application is running does not cause it to crash.

NOTEST
     If defined, causes all tests (and other nonessential stuff) not to be built.
     This saves mucho disk space and is faster, but is an incredibly bad idea :)
     [Insert tales of much saved bacon due to Tests here ].

USE_TESTLIB
     Set to zero to ignore TestLib

================================= Variable =================================
IUE_PACKAGE_LIBRARIES
     A list of libraries derived from the USES variable.  For each package in
     $(USES), the file $(IUELOCALROOT)/Package/iulibs.mk is included, which
     adds a set of libraries to IUE_PACKAGE_LIBRARIES.  The files are included
     in reverse order, depending on the USES variable being specified in
     specific-to-general order.

LDLIBS
     The list of -llibraries to link.  If not set, defaults to
      -lTestLib $(LOCAL_LIBS) $(IULIBS) $(STDLIBS)

ald_libs
     The list of direct libraries to link.
     If given, auto-compute transitive closure of libraries.

IU3DLIBS
     Set to the appropriate IUE libraries when USE_RENDERING is
     on.  Use it in your LDLIBS if you're linking the 3D stuff.

IMMEDIATE_LIBS
     Users can set this in a makefile which creates a (shared) library.
     It should be the list of libraries (with -l but without .lib) containing
     definitions of unresolved symbols in the shared library being built,
     i.e., the "immediate" libraries on which the current one depends.
     If additionally HAS_SH_LINK was set (by default on win32),
     the names and rpaths to these libraries are written into the shared library
     being built.  This allows for transitive linking: when linking an executable,
     it is no longer necessary to give all its link libraries, only the immediate
     ones, which in turn point to their dependencies by the transitive linking
     mechanism.
     If not set, IMMEDIATE_LIBS defaults to IULIBS (or actually to LDLIBS).
     Note that STDLIBS are not added to IMMEDIATE_LIBS (except on win32),
     to avoid specifying a static library, like libstdc++.a .
     Note also that transitive linking will not work in the case of circular
     library dependencies; a bootstrapped build should be done in that case:
     create one library without HAS_SH_LINK, create the other one(s), then
     re-create the first one with HAS_SH_LINK.  This has to be done manually.

USE_IMPLICIT_TEMPLATES
     #
     Set to 1 if any source files requires its templates to be instantiated here.
     [E.g. The IUE makefile use this to turn on implicit instantiation.]
     This may also be defined by config.mk.in now. -- fsm

pre_deps
     Additional dependencies for the deps files.  This varible would
     normally be empty causing no trouble, however if you generate _decl.h files
     from .c files this needs to be done before the depends are run, so the var is set

LIBRARY
     The name of a library to be made from SOURCES.

STATIC_LIBRARY
     The name of a static library to be made from SOURCES.

PROGRAM
     A single executable program made from $(SOURCES).

MINI_PROG_SOURCES
     Single source files to be compiled and linked against LDLIBS.

MINI_SO_TESTS
     Mini shared libraries for TestDrivering.
     Setting this also causes TestDriver.C to be copied from
     the config directory and built.

MINI_SO_SOURCES
     Mini shared libraries for tjrunning, made only when MAKE_SHARED is set

SUBDIRS
     Set to a list of subdirectories into which make should recurse.
     Note that missing directories are silently skipped (this is a feature).

MANPAGE_SOURCES
     If set, the definitive list of source files from which manual pages are to
     be generated.  If not, it is built from SOURCES by adding .h to the basenames.

HTMLINDEX
     Define this variable if you have a handwritten html index
     page.  If unset, one will be generated automatically
     from MANPAGE_SOURCES.

PUBLISHED_PROGRAMS
     Add the basenames of MINI_PROG_SOURCES to this variable to have
     them "published" in $IUELOCALROOT/bin.  For example:
      PUBLISHED_PROGRAMS = useful_example_1 useful_example_7
     #

OBJDIR
     A slight misnomer, OBJDIR is set to a string that describes the type of
     executables that the build will produce, e.g. "solaris" or
     "irix6-CC-n32.profiled".  The full pathnames are in $(RELOBJDIR) and
     $(ABSOBJDIR).

AUX_SOURCE_DIRECTORY
     All source files (extensions .C, .cc or .cxx) in the directories listed
     in this variable are automatically added to SOURCES.
     Directory names are relative to the current makefile's location.
     Its value defaults to Templates.
     This variable can be overridden or appended to in a user makefile.
     See also the variable TEMPLATE_SOURCES

TEMPLATE_SOURCES
     Template instantiations should reside in files with extension
     .C, .cc or .cxx
     in subdirectory Templates.  They are automatically added to SOURCES.
     This variable can be overridden or appended to in a user makefile.

================================= Select =================================
STDLIBS
     The list of libraries generated by the USES variable and USE_* flags.

VXL
     Set this to 1 to use the VXL package.

NO_STDLIBS
     Set this to 1 to not link with vcl

USE_X11

USE_SOCKETS

USE_INTERVIEWS
     Set to 1 to add InterViews headers and libs to the compile.

IVRENDER
     Set to 1 to use InterViews rather than OpenGL for 3D rendering.

USE_FRESCO
     Set to 1 in order to add Fresco headers and libraries to the compile.
     If HAS_FRESCO has not been set, adds -UHAS_FRESCO to DEFINES

USE_TCL
     tcl library

USE_MSQL
     msql library

USE_MYSQL
     mysql library

USE_PERL5
     perl5 library

USE_MOTIFGL
     MOTIFGL libraries

USE_MOTIF

USE_VTK
     Set to 1 to include the VTK headers and libraries

USE_TIFF
     Set to 1 to use the TIFF library

USE_JPEG
     Set to 1 to use the JPEG library

USE_MPEG
     Set to 1 to use the MPEG library

USE_MPEG2
     Set to 1 to use the MPEG2 library

USE_DCMTK
     Set to 1 to use the DCMTK library

USE_AVI
     Set to 1 to use the AVI library

USE_NETLIB
     Set to 1 to use the NETLIB library

USE_PNG
     PNG image format libraries

USE_ZLIB
     zlib compression library

USE_GLUT
     Set to 1 to use the GLUT (OpenGL Utility Toolkit) library.

USE_GMP
     Set to 1 to use the GMP (GNU Multiple Precision) library.

USE_QGL

USE_QT

USE_GTKGLAREA
     GTKGLAREA (another OpenGL Utility Toolkit) library

USE_GTK
     GTK library

USE_FLTK
     FLTK (yet another OpenGL Utility Toolkit) libraries

USE_OPENGL
     Open GL libraries

USE_XGL
     XGL libraries

USE_SGI_OPENGL
     SGI OpenGL Software Development Kit

USE_WING
     Microsoft WinG Software Development Kit

USE_WINAPI
     Microsoft Windows API

USE_MFC
     Microsoft Foundation Class API

USE_OLE
     Microsoft Foundation Class API

USE_ATL
     Microsoft ATL API

USE_MATLAB

USE_SDL

USE_HERMES

USE_ACE
     Set to 1 to include the ACE headers and libACE

USE_OMNIORB
     Set to 1 to include the OMNIORB headers and the omniorb libraries

USE_XERCES
     XERCES library

================================= Config =================================
CVFLAGS
     Compiler Verbosity flags, may be overridden by specifying in site.mk

CGFLAGS
     Code Generation Flags; passed to cc1,cc1plus,ld.
     Set in build-$(BUILD).mk

PRAGMA_INSTANTIATE_TEMPLATES
     Set by configure, or in $(OS)-$(COMPILER).mk to indicate that the compiler
     uses #pragma instantiate Class<T> rather than template class Class<T> to
     instantiate templates.

CPP_MAKEDEPEND
     Set to 1 if using the win32bin/depends.pl script

MAKE_SHARED
     Should be defined in build-$(BUILD).mk if BUILD implies
     shared libraries and dynamically linked executables.

MAKE_ARLIB MAKE_ARLIB_CMD
     Set MAKE_ARLIB if what? FIXME
     Otherwise use MAKE_ARLIB_CMD

HAS_SH_LINK
     Set to 1 if the operating system needs to (or can) add -l flags when building a shared
     library, to resolve immediate external dependencies.
     Also set LDLIBS to IMMEDIATE_LIBS which is normally much shorter.
     This is only important when creating an executable.

USE_LIB_VERSION
     This is for OS's like sunos that need a version number on the
     shared library for things to work.  The USE_LIB_VERSION flag
     is set in the os-compiler file in the config directory.
     This is wrapped with an ifdef MAKE_SHARED so that it is only done
     with the shared version

MAKE_ARLIB MAKE_ARLIB_CMD
     Set MAKE_ARLIB if what? FIXME
     Otherwise use MAKE_ARLIB_CMD

LIB_PREFIX
     This is preprended to each library name.

LIB_EXT
     The file extension for shared libraries, E.g. "so" for unix, "dll" for windows. Is "sl" used?

AR_EXT
     The file extension for archive libraries. E.g. "a" for unix, "lib" for windows.

OBJ_EXT
     The extension used for object files. E.g. "o" for unix and "obj" for windows.

EXESUFFIX
     This is appeded to executables. E.g. "" for unix and ".exe" for windows.

MAKE_EXE
     The command used to generate executables. On most platforms this is $(PURIFY) $(C++)

MAKE_SHLIB
     The command used to generate shared libraries. On most platforms this is $(C++) -shared

MAKE_ARLIB
     Command used to generate archive libraries. To be used in a rule where the target
     is the library to make.

OLD_SUBDIR_STYLE
     An alternative to this, when OLD_SUBDIR_STYLE is set, is to build into
     subdirectory $(IUEOSTYPE)-$(COMPILER) (i.e., without "obj/") and to
     put libraries into lib.$(OBJDIR) :

OBJBASE
     If set, all objects and libraries go to a shadow tree rooted at OBJBASE.
     Elso, objects and libraries go into the source tree.

NO_BOOL
     NO_BOOL is set to true by configure if your compiler does not support the bool type.
     In that case, we use 'unsigned' instead.

HAS_BROKEN_AS
     HAS_BROKEN_AS is set to 1 by configure if your assember cannot handle long lines.

================================= Internal =================================
LDPATH
     Made from LIBDIRS, holds appropriate -L and -R or -rpath flags.

LOADLIBES
     LOADLIBES is used by the default GNU make rules for linking executables.

allsources_deps
     The list of .d files in which dependencies live.
     The .d files for x.cc are $(RELOBJDIR)$/x.cc.d
     This allows us to easily determine the src file for a .d file
     They should be *included*, just not rebuilt.

LIB_DEPENDENCIES
     The full pathnames of all static libraries being linked, generated from
     LIBDIRS and LDLIBS.  For example, an LDLIBS of
      -lmylib -lTJCOOL -lm
     might produce:
      /homes/me/lib/libmylib.a /pkg/iue/COOL/lib/$(IUEOSTYPE)/libCOOL.a /usr/lib/libm.a
     This list can then be used as a dependency of any executable.

MINI_PROG_BASENAMES
     1-1 correspondence between basenames of MINI_PROG_EXES

MINI_PROG_EXES
     The list of executables generated from MINI_PROG_SOURCES

MANDIR
     Destination for autogenerated manual pages.

HTMLDIR
     Subdirectory into which to place HTML indices.

tj_libdir
     Set to the relative name of the library directory. It is
     obtained from $(OBJDIR) by replacing 'obj' with 'lib'.

CENTRAL_LIBDIR
     If defined, all libraries go into $(IUELOCALROOT)/$(tj_libdir), otherwise they
     go into package-specific subdirectories.  This is the default if IUEOSTYPE is not set
     in the environment (recommended), or on windows.

default_LIBDEST
     Default final resting place of libraries

