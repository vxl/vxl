# vcl/CMakeLists.txt

IF(WIN32)
  # MSVC.NET produces lots of warnings like
  # "warning LNK4221: no public symbols found; archive member will be inaccessible"
  # that depend on subtle logic at compile time.
  # This is a bit indescriminate, but it may be the only feasible way to suppress them.
  IF (CMAKE_CXX_COMPILER MATCHES "^cl$")
    SET ( CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /WARN:0")
    SET ( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /WARN:0")
  ENDIF (CMAKE_CXX_COMPILER MATCHES "^cl$")
ENDIF(WIN32)


PROJECT( vcl )

# Set up vcl_where_root_dir.h to have a macro set to $VCL_SOURCE_ROOT_DIR
CONFIGURE_FILE(
  ${vxl_SOURCE_DIR}/vcl/vcl_where_root_dir.h.in
  ${vxl_BINARY_DIR}/vcl/vcl_where_root_dir.h ESCAPE_QUOTES
)

SET( vcl_sources
  vcl_compiler.h
  vcl_deprecated.cxx     vcl_deprecated.h

  vcl_where_root_dir.h.in
  vcl_config_compiler.h.in
  vcl_config_headers.h.in
  vcl_config_manual.h.in

  vcl_cmath.cxx          vcl_cmath.h
  vcl_cassert.cxx        vcl_cassert.h
  vcl_cstdlib.cxx        vcl_cstdlib.h

  vcl_algorithm.txx      vcl_algorithm.h
  vcl_bitset.h
  vcl_cctype.h
  vcl_cerrno.h
  vcl_cfloat.h
  vcl_ciso646.h
  vcl_climits.h
  vcl_clocale.h
  vcl_complex.txx        vcl_complex.h
  vcl_complex_fwd.h
  vcl_csetjmp.h
  vcl_csignal.h
  vcl_cstdarg.h
  vcl_cstddef.h
  vcl_cstdio.h
  vcl_cstring.h
  vcl_ctime.h
  vcl_cwchar.h
  vcl_cwctype.h
  vcl_deprecated_header.h
  vcl_deque.txx          vcl_deque.h
  vcl_exception.h
  vcl_fstream.h
  vcl_functional.txx     vcl_functional.h
  vcl_iomanip.h
  vcl_ios.h
  vcl_iosfwd.h
  vcl_iostream.h
  vcl_istream.h
  vcl_iterator.txx       vcl_iterator.h
  vcl_limits.h
  vcl_list.txx           vcl_list.h
  vcl_locale.h
  vcl_map.txx            vcl_map.h
  vcl_memory.h
  vcl_new.h
  vcl_numeric.h
  vcl_ostream.h
  vcl_queue.txx          vcl_queue.h
  vcl_set.txx            vcl_set.h
  vcl_sstream.h
  vcl_stack.txx          vcl_stack.h
  vcl_stdexcept.h
  vcl_stlfwd.h
  vcl_streambuf.h
  vcl_string.txx         vcl_string.h
  vcl_typeinfo.h
  vcl_utility.txx        vcl_utility.h
  vcl_valarray.h
  vcl_vector.txx         vcl_vector.h
  vcl_sys/time.h
  vcl_sys/types.h

  generic/vcl_algorithm.h
  generic/vcl_bitset.h
  generic/vcl_blah.h
  generic/vcl_cassert.h
  generic/vcl_cctype.h
  generic/vcl_cerrno.h
  generic/vcl_cfloat.h
  generic/vcl_ciso646.h
  generic/vcl_climits.h
  generic/vcl_clocale.h
  generic/vcl_cmath.h
  generic/vcl_complex.h
  generic/vcl_csetjmp.h
  generic/vcl_csignal.h
  generic/vcl_cstdarg.h
  generic/vcl_cstddef.h
  generic/vcl_cstdio.h
  generic/vcl_cstdlib.h
  generic/vcl_cstring.h
  generic/vcl_ctime.h
  generic/vcl_cwchar.h
  generic/vcl_cwctype.h
  generic/vcl_deque.h
  generic/vcl_exception.h
  generic/vcl_fstream.h
  generic/vcl_functional.h
  generic/vcl_iomanip.h
  generic/vcl_ios.h
  generic/vcl_iosfwd.h
  generic/vcl_iostream.h
  generic/vcl_istream.h
  generic/vcl_iterator.h
  generic/vcl_limits.h
  generic/vcl_list.h
  generic/vcl_locale.h
  generic/vcl_map.h
  generic/vcl_memory.h
  generic/vcl_memory_tr1.h
  generic/vcl_numeric.h
  generic/vcl_ostream.h
  generic/vcl_queue.h
  generic/vcl_set.h
  generic/vcl_sstream.h
  generic/vcl_stack.h
  generic/vcl_stdexcept.h
  generic/vcl_streambuf.h
  generic/vcl_string.h
  generic/vcl_typeinfo.h
  generic/vcl_utility.h
  generic/vcl_valarray.h
  generic/vcl_vector.h

  iso/vcl_algorithm.txx  iso/vcl_algorithm.h
  iso/vcl_complex.txx    iso/vcl_complex.h
  iso/vcl_deque.txx      iso/vcl_deque.h
  iso/vcl_functional.txx iso/vcl_functional.h
  iso/vcl_iterator.txx   iso/vcl_iterator.h
  iso/vcl_list.txx       iso/vcl_list.h
  iso/vcl_map.txx        iso/vcl_map.h
  iso/vcl_queue.txx      iso/vcl_queue.h
  iso/vcl_set.txx        iso/vcl_set.h
  iso/vcl_stack.txx      iso/vcl_stack.h
  iso/vcl_string.txx     iso/vcl_string.h
  iso/vcl_utility.txx    iso/vcl_utility.h
  iso/vcl_vector.txx     iso/vcl_vector.h
  iso/vcl_bitset.h
  iso/vcl_cassert.h
  iso/vcl_cctype.h
  iso/vcl_cerrno.h
  iso/vcl_cfloat.h
  iso/vcl_ciso646.h
  iso/vcl_climits.h
  iso/vcl_clocale.h
  iso/vcl_cmath.h
  iso/vcl_csetjmp.h
  iso/vcl_csignal.h
  iso/vcl_cstdarg.h
  iso/vcl_cstddef.h
  iso/vcl_cstdio.h
  iso/vcl_cstdlib.h
  iso/vcl_cstring.h
  iso/vcl_ctime.h
  iso/vcl_cwchar.h
  iso/vcl_cwctype.h
  iso/vcl_exception.h
  iso/vcl_fstream.h
  iso/vcl_iomanip.h
  iso/vcl_ios.h
  iso/vcl_iosfwd.h
  iso/vcl_iostream.h
  iso/vcl_istream.h
  iso/vcl_limits.h
  iso/vcl_locale.h
  iso/vcl_memory.h
  iso/vcl_memory_tr1.h
  iso/vcl_new.h
  iso/vcl_numeric.h
  iso/vcl_ostream.h
  iso/vcl_sstream.h
  iso/vcl_stdexcept.h
  iso/vcl_streambuf.h
  iso/vcl_typeinfo.h
  iso/vcl_valarray.h

  gcc/vcl_cmath.h
  gcc/vcl_cstdlib.h

  gcc-libstdcxx-v3/vcl_algorithm.txx
  gcc-libstdcxx-v3/vcl_deque.txx
  gcc-libstdcxx-v3/vcl_functional.txx
  gcc-libstdcxx-v3/vcl_iterator.txx
  gcc-libstdcxx-v3/vcl_list.txx
  gcc-libstdcxx-v3/vcl_map.txx
  gcc-libstdcxx-v3/vcl_set.txx
  gcc-libstdcxx-v3/vcl_string.txx
  gcc-libstdcxx-v3/vcl_utility.txx
  gcc-libstdcxx-v3/vcl_vector.txx

  win32-vc9/vcl_cmath.h
  win32-vc9/vcl_complex.h
  win32-vc9/vcl_cstdlib.h
  win32-vc9/vcl_valarray.h

  stlport/vcl_cmath.h
  stlport/vcl_complex.h
  stlport/vcl_cstdlib.h

  # The following shall not be used other than as reference count for smart pointers
  vcl_atomic_count.h
  internal/vcl_atomic_count_gcc.h
  internal/vcl_atomic_count_gcc_x86.h
  internal/vcl_atomic_count_pthreads.h
  internal/vcl_atomic_count_solaris.h
  internal/vcl_atomic_count_sync.h
  internal/vcl_atomic_count_win32.h
  internal/vcl_interlocked.h
)

# We use implicit instantiation of the standard library now,
# so we shouldn't be explicitly instantiating anything.
# This also avoid trouble where the instantiation hack conflict
# with modern, more compliant compilers.
#AUX_SOURCE_DIRECTORY(Templates vcl_sources)

ADD_LIBRARY(vcl ${vcl_sources})

# CMake can automatically figure out the compiler characteristics on
# Windows too.  No need to do manual config.

IF(UNIX)
  TARGET_LINK_LIBRARIES( vcl m )
ENDIF(UNIX)

# Installation
INSTALL_TARGETS(/lib vcl)
INSTALL_NOBASE_HEADER_FILES(/include/vxl/vcl ${vcl_sources})

# INCLUDE( ${vxl_SOURCE_DIR}/vcl/LinkSTLPort.cmake )

IF( BUILD_TESTING)
  add_subdirectory(tests)
ENDIF( BUILD_TESTING)
